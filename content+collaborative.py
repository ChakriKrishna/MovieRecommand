# -*- coding: utf-8 -*-
"""content+collaborative.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qjjTC0ZJEwK5VNG9tA7RvpTwgvVBTvl_
"""

import pandas as pd
import numpy as np
import random
from math import *
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.metrics.pairwise import cosine_similarity

df = pd.read_csv("movie_dataset.csv")
features = ['keywords','cast','genres','director']
def combine_features(row):
    return row['keywords']+" "+row['cast']+" "+row['genres']+" "+row['director']

for feature in features:
    df[feature] = df[feature].fillna('')
df["combined_features"] = df.apply(combine_features,axis=1)
#df.iloc[0].combined_features

cv = CountVectorizer() 
count_matrix = cv.fit_transform(df["combined_features"])
cosine_sim = cosine_similarity(count_matrix)
def get_title_from_index(index):
    return df[df.index == index]["title"].values[0]
def get_index_from_title(title):
    return df[df.title == title]["index"].values[0]

movie_user_likes = "Spectre"
movie_index = get_index_from_title(movie_user_likes)
similar_movies = list(enumerate(cosine_sim[movie_index]))
sorted_similar_movies = sorted(similar_movies,key=lambda x:x[1],reverse=True)[1:]

i=0
print("Top 5 similar movies to "+movie_user_likes+" are:\n")
for element in sorted_similar_movies:
    print(get_title_from_index(element[0]))
    i=i+1
    if i>5:
        break

df1 = pd.read_csv("movie_dataset.csv")
df1=pd.DataFrame(df1, columns=['title'])
df1 = df1['title'].to_list()
#print('List of Titles: ', df1)
#print('Type of listOfTitle: ', type(df1))
u1 = random.sample(df1,1127)
print ("Random selected title for u1 : " + str(u1))
u2 = random.sample(df1,1689)
print ("Random selected title for u2 : " + str(u2))
u3 = random.sample(df1,1988)
print ("Random selected title for u3 : " + str(u3))
u4 = random.sample(df1,1646)
print ("Random selected title for u4 : " + str(u4))
u5 = random.sample(df1,1725)
print ("Random selected title for u5 : " + str(u5))

def jaccard_similarity(x,y):
      intersection_cardinality=len(set.intersection(*[set(x),set(y)]))
      union_cardinality=len(set.union(*[set(x),set(y)]))
      return intersection_cardinality/float(union_cardinality)

a=(jaccard_similarity(u1,u2))
print ("Jaccard Similarity btw u1 and u2 : " + str(a))
b=(jaccard_similarity(u1,u3))
print ("Jaccard Similarity btw u1 and u3 : " + str(b))
c=(jaccard_similarity(u1,u4))
print ("Jaccard Similarity btw u1 and u4 : " + str(c))
d=(jaccard_similarity(u1,u5))
print ("Jaccard Similarity btw u1 and u5 : " + str(d))

def intersect(a, b):
    return list(set(a) & set(b))

def union(a, b):
    return list(set(a) | set(b))

def Diff(li1, li2): 
    return (list(set(li1) - set(li2))) 

if (a >= b) and (a >= c) and (a >=d):
      largest = 'a'
      z="u1 and u2"
      intersectionn=(intersect(u1, u2))
      unionn=(union(u1, u2))
      RecomList=(Diff(u1, u2))
elif (b >= a) and (b >= c) and (b >=d):
      largest = 'b'
      z="u1 and u3"
      intersectionn=(intersect(u1, u3))
      unionn=(union(u1, u3))
      RecomList=(Diff(u1, u3))
elif (c >= a) and (c >= b) and (c >=d):
      largest = 'c'
      z="u1 and u4"
      intersectionn=(intersect(u1, u4))
      unionn=(union(u1, u4))
      RecomList=(Diff(u1, u4))
else:
      largest = 'd'
      z="u1 and u5"
      intersectionn=(intersect(u1, u5))
      unionn=(union(u1, u5))
      RecomList=(Diff(u1, u5)) 

print("The highest similarity is between", z)



print ("Recommanded movies for u1 on basis of similarity score between " + str(z), end=" "),
#print ("are : " + str(RecomList))
print("are :")
print(str(RecomList))